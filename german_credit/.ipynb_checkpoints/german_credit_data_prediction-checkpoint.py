# -*- coding: utf-8 -*-
"""german_credit_data_prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YpGtrm9wsoTjLMKojsBqE0hMfDZqPK5o
"""

# Importation des modules nécessaires
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

import warnings
warnings.filterwarnings("ignore")

# Importation de la base de données
data=pd.read_csv("german_credit_data.csv")
data.head(3)

"""# Analyse du dataset"""

data.shape

data.info()

data.describe()

# Correlation entre les variables quantitatives
corr = data.select_dtypes(include=np.number).corr()

# Créer un masque pour la partie supérieure
mask = np.triu(np.ones_like(corr, dtype=bool))

plt.figure(figsize=(8,4))
sns.heatmap(corr,annot=True,cmap="coolwarm",cbar=True, mask=mask)
plt.title("Correlation entre les variables quantitatives")

def nombre_modalites_uniques(df,column_name):
  return df[column_name].nunique()

nombre_modalites_uniques(data,data.columns.to_list())

# Valeurs manquantes
def valeurs_manquantes(df):
  nb_valeurs_manquantes = df.isna().sum()
  pourcentage_valeurs_manquantes = df.isna().mean() * 100
  table_valeurs_manquantes = pd.concat([nb_valeurs_manquantes,pourcentage_valeurs_manquantes],axis=1)
  table_valeurs_manquantes.columns = ["Nombre de valeurs manquantes","Pourcentage de valeurs manquantes (%)"]
  table_valeurs_manquantes.sort_values(by="Pourcentage de valeurs manquantes (%)",ascending=False,inplace=True)
  return table_valeurs_manquantes

valeurs_manquantes(data)

# Distribution des variables quali
data.describe(include="object").T

"""# Data visualization"""

df = data.copy()

df.drop("Unnamed: 0",axis=1,inplace=True)

# Traitement des valeurs manquantes
df['Checking account'].fillna(df['Checking account'].mode()[0],inplace=True)
df['Saving accounts'].fillna(df['Saving accounts'].mode()[0],inplace=True)
df.isna().sum()

"""Nous commencerons par créer des groupes d'age ainsi que que des groupes pour la durée, compte tenue du grand nombre de modalités pour chacune de ces variables"""

# Creation de la colonne 'Age_group'
df['Age_group'] = 0

for i in range(len(df['Age'])):
  if df['Age'][i] <25:
    df['Age_group'][i] = '[0-25['
  elif df['Age'][i] <35:
    df['Age_group'][i] = '[25-35['
  elif df['Age'][i] <45:
    df['Age_group'][i] = '[35-45['
  elif df['Age'][i] <55:
    df['Age_group'][i] = '[45-55['
  elif df['Age'][i] <65:
    df['Age_group'][i] = '[55-65['
  elif df['Age'][i] <75:
    df['Age_group'][i] = '[65-75['
  else:
    df['Age_group'][i] = '75+'

# Creation de la colonne Duration_group
df['Duration_group'] = 0

for i in range(len(df['Duration'])):
  if df['Duration'][i] <12:
    df['Duration_group'][i] = '[0-12['
  elif df['Duration'][i] <24:
    df['Duration_group'][i] = '[12-24['
  elif df['Duration'][i] <36:
    df['Duration_group'][i] = '[24-36['
  elif df['Duration'][i] <48:
    df['Duration_group'][i] = '[36-48['
  elif df['Duration'][i] <60:
    df['Duration_group'][i] = '[48-60['
  elif df['Duration'][i] <72:
    df['Duration_group'][i] = '[60-72['
  else:
    df['Duration_group'][i] = '72+'

df.head(3)

# Distribution de la variable Risk

fig, ax = plt.subplots(1, 2, figsize=(8, 4))

# Camembert
df['Risk'].value_counts().plot.pie(colors=["green", "red"], ax=ax[0],autopct="%.2f%%")
ax[0].set_xlabel("Risk")
ax[0].set_ylabel("Count")

# Diagramme en bar
sns.countplot(x=df['Risk'], palette=["green", "red"], edgecolor="black", linewidth=1, ax=ax[1])
ax[1].set_xlabel("Risk")
ax[1].set_ylabel("Count")

# Afficher les graphiques
fig.suptitle("Distribution de la variable Risk")
plt.tight_layout()
plt.show()

# Distribution des autres variables
var_list = df.columns.to_list()
for col in ['Risk','Age','Duration','Credit amount']:
  var_list.remove(col)
var_list

fig, ax = plt.subplots(4,2, figsize=(14, 24))
palette = ["green", "red","yellow","gray","blue","lightblue","orange","purple"]
i=0
for row in range(4):
  for col_idx in range(2):
    sns.countplot(x=df[var_list[i]], palette=palette, edgecolor="black", linewidth=1, ax=ax[row, col_idx])
    ax[row, col_idx].set_xlabel(var_list[i])
    ax[row, col_idx].set_ylabel("Count")
    ax[row, col_idx].set_title(f"Distribution de {var_list[i]}")
    ax[row, col_idx].set_xticklabels(ax[row, col_idx].get_xticklabels(), rotation=30)
    i+=1


plt.tight_layout()
plt.show()

# Repartition de la variable Risk en fonction des autres variables
fig, ax = plt.subplots(4,2, figsize=(14, 24))
palette = ["green", "red","yellow","gray","blue","lightblue","orange","purple"]
i=0

for row in range(4):
  for col_idx in range(2):
    sns.countplot(x=df[var_list[i]],hue=df['Risk'], palette=palette, edgecolor="black", linewidth=1, ax=ax[row, col_idx])
    ax[row, col_idx].set_xlabel(var_list[i])
    ax[row, col_idx].set_ylabel("Count")
    ax[row, col_idx].set_title(f"Répartition de Risk en fonction de {var_list[i]}")
    ax[row, col_idx].set_xticklabels(ax[row, col_idx].get_xticklabels(), rotation=30)
    i+=1


plt.tight_layout()
plt.show()

"""Observons à présent le montant du crédit, en fonction de la durée, du sexe, de l'âge"""

plt.figure(figsize=(10,3))

sns.lineplot(x=df['Duration_group'],y=df['Credit amount'],hue=df['Sex'])
plt.title("Répartition du montant du crédit en fonction de la durée et du sexe")

plt.show()

plt.figure(figsize=(10,3))

sns.lineplot(x=df['Age_group'],y=df['Credit amount'],hue=df['Sex'])
plt.title("Répartition du montant du crédit en fonction de l'age et du sexe")

plt.show()

# Répartition du montant de credit par âge et par sexe, en fonction du Risk
plt.figure(figsize=(10,3))

sns.FacetGrid(data=df,col='Risk',height=4,aspect=1.5).map(sns.lineplot,'Age_group','Credit amount','Sex',palette=palette).add_legend()
plt.show()

# Répartition du montant de credit par durée et par sexe, en fonction du Risk
plt.figure(figsize=(10,3))

sns.FacetGrid(data=df,col='Risk',height=4,aspect=1.5).map(sns.lineplot,'Duration_group','Credit amount','Sex',palette=palette).add_legend()
plt.show()

"""# Data Preprocessing"""

df2 = df.copy()

df2 = df2.drop(['Age','Duration'],axis=1).rename(columns={'Age_group':'Age','Duration_group':'Duration'})
df2.head(3)

"""Nous allons à présent préparer nos variables pour la construction de notre modèle. Pour ce faire, nous allons transformer les variables `Sex` et `Risk` en variables numériques; Nous allons créer des variables dummy à partir des variables catégorielles restantes, et enfin, nous allons standardiser la variable `Credit amount`"""

# Labelisation de la variable Sex et de la variable Risk
from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()

df2['Sex'] = le.fit_transform(df2['Sex'])
df2['Risk'] = le.fit_transform(df2['Risk'])
df2.head(3)

# Création des variables dummy à partir des autres variables categorielles
var = df2.select_dtypes(include='object').columns.to_list()
df2 = pd.get_dummies(df2,columns=var,drop_first=True)
df2.head(3)

# Standardisation de la variable Credit amount
from sklearn.preprocessing import StandardScaler,MinMaxScaler
scaler = MinMaxScaler()
df2['Credit amount'] = scaler.fit_transform(df2[['Credit amount']])
df2.head(3)

"""# Construction du modèle"""

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score,confusion_matrix,classification_report

X = df2.drop('Risk',axis=1)
y = df2['Risk']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""### GradientBoosting Model"""

from sklearn.ensemble import GradientBoostingClassifier

gb = GradientBoostingClassifier(n_estimators=100, learning_rate=0.01, max_depth=3, random_state=42)
gb.fit(X_train, y_train)

y_pred = gb.predict(X_test)

# Performance du modèle
print("Train Accuracy:", accuracy_score(y_train, gb.predict(X_train)))
print("Test Accuracy:", accuracy_score(y_test, y_pred))
print("-----------------------------------------------------")
print(classification_report(y_test, y_pred))

"""### RandomForest Model"""

from sklearn.ensemble import RandomForestClassifier

rf = RandomForestClassifier(n_estimators=100, random_state=42)
rf.fit(X_train, y_train)

y_pred = rf.predict(X_test)

# Performance du modèle
print("Train Accuracy:", accuracy_score(y_train, rf.predict(X_train)))
print("Test Accuracy:", accuracy_score(y_test, y_pred))
print("-----------------------------------------------------")
print(classification_report(y_test, y_pred))

"""### SVM Model"""

from sklearn.svm import SVC

svm = SVC(kernel='linear', random_state=42)
svm.fit(X_train, y_train)

y_pred = svm.predict(X_test)

# Performance du modèle
print("Train Accuracy:", accuracy_score(y_train, svm.predict(X_train)))
print("Test Accuracy:", accuracy_score(y_test, y_pred))
print("-----------------------------------------------------")
print(classification_report(y_test, y_pred))