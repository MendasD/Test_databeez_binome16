# -*- coding: utf-8 -*-
"""Scrapper_donnees_meteo_Dakar_et_Thi.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1P3TSvlO4B4scYSvCBCfWXwk2V8WPDHWH
"""

# Installation des bibliothèques non natives
"""
!pip install schedule
!pip install psycopg2
!pip install requests
!pip install beautifulsoup4
!pip install datetime
"""

# Importation des bibliothèques necessaires
import requests
import schedule
import time
from datetime import datetime
import pandas as pd
from bs4 import BeautifulSoup
import os
from dotenv import load_dotenv

# Chargement des variables d'environnement
load_dotenv()

# Paramètres de base
API_KEY = os.getenv('API_KEY')
BASE_URL="https://api.openweathermap.org/data/2.5/weather"

# Paramètres de la base de données
#postgresql://ejilshyg:lonzjsqfzminmbioqlor@alpha.mkdb.sh:5432/vrtbgych
#postgres://username:password@hostname:port/database_name

# Paramètres de connection
hostname = os.getenv('hostname')
password = os.getenv('password')
database = os.getenv('database')
port_id = 5432
username = os.getenv('username')

# Liste des villes (Dakar et Thiès avec leurs identifiants ou noms)
cities = ["Dakar", "Thies"]

# Stocker ces données dans  une base de données relationnelle PostgreSQL
def store_weather_data(values):
        # Importation des modules necessaires
        import psycopg2
        # Pour retourner les resultats sous forme de dictionnaire
        import psycopg2.extras

        # curseur
        cur = None
        # variable de connection
        conn = None

        # Connection à la base
        try:
            conn = psycopg2.connect(
                host=hostname,
                user=username,
                dbname=database,
                password=password,
                port=port_id
            )
  # Le paramètre ajouté c'est pour que le curseur donne les resultats sous forme de dictionnaire
            cur = conn.cursor(cursor_factory = psycopg2.extras.DictCursor)

              # On prepare l'instruction pour creer la table employee
            create_script = """ CREATE TABLE  IF NOT EXISTS donnees_meteo(
                id varchar(50) PRIMARY KEY,
                city varchar(40) NOT NULL,
                temperature float(10) NOT NULL,
                weather_description varchar(20) NOT NULL,
                pressure float(10) NOT NULL,
                humidity float(10) NOT NULL,
                timestamp varchar(30))"""

               # On execute l'instruction
            cur.execute(create_script)


            insert_script = 'INSERT INTO donnees_meteo (id, city, temperature, weather_description, pressure, humidity, timestamp) VALUES (%s,%s,%s,%s,%s,%s,%s)'
            insert_values = values

            for line in insert_values:
                print(f"Tentative d'insertion de {line}")
                if len(line) != 7:
                    print(f"Erreur : la ligne {line} ne contient pas 7 éléments.")
                    continue  # Passer à la ligne suivante si la longueur n'est pas correcte
                try:
                    cur.execute(insert_script, line)
                except Exception as e:
                    print(f"Erreur lors de l'insertion des données pour {line[0]}: {e}")

            # On envoie les modifications dans la base de données
            conn.commit()
        except Exception as error:
            print(error)

        finally:
            if cur is not None:
                cur.close()
            if conn is not None:
                conn.close()
            for value in values:
                print(value)



def fetch_weather_data():
    values = []
    for city in cities:
        # Paramètres de requête
        params = {
            "q": city,
            "appid": API_KEY,
            "units": "metric",  # Pour avoir les températures en Celsius
            "lang": "fr"        # Langue française pour la description météo
        }

        # Requête vers l'API OpenWeather
        response = requests.get(BASE_URL, params=params)
        if response.status_code == 200:
            data = response.json()

            # Extraire les informations nécessaires
            city_name = data['name']
            temperature = data['main']['temp']
            weather_description = data['weather'][0]['description']
            pressure = data['main']['pressure']
            humidity = data['main']['humidity']
            timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

            values.append((f"{city_name}_{timestamp}",city_name,temperature,weather_description,pressure,humidity,timestamp))

            # Affichage des données
            print(f"Ville: {city_name}")
            print(f"Température: {temperature} °C")
            print(f"Description météo: {weather_description}")
            print(f"Pression: {pressure} hPa")
            print(f"Humidité: {humidity} %")
            print(f"Timestamp: {timestamp}")
            print("-" * 50)

        else:
            print(f"Erreur pour la ville {city}: {response.status_code}, {response.text}")

    # Stocker les données dans une base de données PostgreSQL
    store_weather_data(values)

# Exécution de la fonction
fetch_weather_data()

# Planifier le script pour une exécution journalière
schedule.every().day.at("10:00").do(fetch_weather_data)  # L'heure programmée est 10h00

print("Démarrage de la planification...")
while True:
    schedule.run_pending()
    time.sleep(1)